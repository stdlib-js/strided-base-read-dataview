{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar isComplex128Array = require( '@stdlib/array-base-assert-is-complex128array' );\nvar isComplex64Array = require( '@stdlib/array-base-assert-is-complex64array' );\nvar isBooleanArray = require( '@stdlib/array-base-assert-is-booleanarray' );\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar reinterpret128 = require( '@stdlib/strided-base-reinterpret-complex128' );\nvar reinterpret64 = require( '@stdlib/strided-base-reinterpret-complex64' );\nvar reinterpretBoolean = require( '@stdlib/strided-base-reinterpret-boolean' );\nvar bytesPerElement = require( '@stdlib/ndarray-base-bytes-per-element' );\n\n\n// VARIABLES //\n\nvar METHOD_TABLE = {\n\t'float64': 'getFloat64',\n\t'float32': 'getFloat32',\n\t'float16': 'getFloat16',\n\t'int64': 'getBigInt64',\n\t'int32': 'getInt32',\n\t'int16': 'getInt16',\n\t'int8': 'getInt8',\n\t'uint64': 'getBigUint64',\n\t'uint32': 'getUint32',\n\t'uint16': 'getUint16',\n\t'uint8': 'getUint8'\n};\n\n\n// FUNCTIONS //\n\n/**\n* Copies elements from an input strided DataView to elements in a strided indexed array.\n*\n* @private\n* @param {string} dtype - output array data type\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {DataView} view - input DataView\n* @param {integer} strideView - `view` stride length (in bytes)\n* @param {NonNegativeInteger} offsetView - starting `view` index (in bytes)\n* @param {Object} out - output array object\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - starting `out` index\n* @param {boolean} littleEndian - boolean indicating whether the data is stored in little-endian format\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var DataView = require( '@stdlib/array-dataview' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var view = new DataView( x.buffer );\n*\n* var y = new Float64Array( x.length );\n*\n* indexed( 'float64', x.length, view, 8, 0, arraylike2object( y ), 1, 0, true );\n* // e.g., y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction indexed( dtype, N, view, strideView, offsetView, out, strideOut, offsetOut, littleEndian ) {\n\tvar data;\n\tvar io;\n\tvar iv;\n\tvar m;\n\tvar i;\n\n\tm = METHOD_TABLE[ dtype ];\n\n\tdata = out.data;\n\n\tio = offsetOut;\n\tiv = offsetView;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdata[ io ] = view[ m ]( iv, littleEndian );\n\t\tio += strideOut;\n\t\tiv += strideView;\n\t}\n}\n\n/**\n* Copies elements from an input strided DataView to elements in a strided complex array.\n*\n* @private\n* @param {string} dtype - output array data type\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {DataView} view - input DataView\n* @param {integer} strideView - `view` stride length (in bytes)\n* @param {NonNegativeInteger} offsetView - starting `view` index (in bytes)\n* @param {Collection} out - output array object\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - starting `out` index\n* @param {boolean} littleEndian - boolean indicating whether the data is stored in little-endian format\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var DataView = require( '@stdlib/array-dataview' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var view = new DataView( x.buffer );\n*\n* var y = new Float64Array( x.length );\n*\n* complex( 'float64', 2, view, 8, 0, arraylike2object( y ), 1, 0, true );\n* // e.g., y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction complex( dtype, N, view, strideView, offsetView, out, strideOut, offsetOut, littleEndian ) {\n\tvar nbytes;\n\tvar data;\n\tvar io;\n\tvar iv;\n\tvar m;\n\tvar i;\n\n\tm = METHOD_TABLE[ dtype ];\n\tnbytes = bytesPerElement( dtype );\n\n\tdata = out.data;\n\n\t// Adjust meta data to account for interleaved real and imaginary components:\n\tstrideOut *= 2;\n\toffsetOut *= 2;\n\n\tio = offsetOut;\n\tiv = offsetView;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tdata[ io ] = view[ m ]( iv, littleEndian );\n\t\tdata[ io+1 ] = view[ m ]( iv+nbytes, littleEndian );\n\t\tio += strideOut;\n\t\tiv += strideView;\n\t}\n}\n\n/**\n* Copies elements from an input strided DataView to elements in a strided accessor array.\n*\n* @private\n* @param {string} dtype - output array data type\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {DataView} view - input DataView\n* @param {integer} strideView - `view` stride length (in bytes)\n* @param {NonNegativeInteger} offsetView - starting `view` index (in bytes)\n* @param {Object} out - output array object\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - starting `out` index\n* @param {boolean} littleEndian - boolean indicating whether the data is stored in little-endian format\n* @returns {void}\n*\n* @example\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n* var Float64Array = require( '@stdlib/array-float64' );\n* var DataView = require( '@stdlib/array-dataview' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var view = new DataView( x.buffer );\n*\n* var y = new Float64Array( x.length );\n*\n* accessors( 'float64', x.length, view, 8, 0, arraylike2object( toAccessorArray( y ) ), 1, 0, true );\n* // e.g., y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*/\nfunction accessors( dtype, N, view, strideView, offsetView, out, strideOut, offsetOut, littleEndian ) {\n\tvar data;\n\tvar set;\n\tvar io;\n\tvar iv;\n\tvar m;\n\tvar i;\n\n\tm = METHOD_TABLE[ dtype ];\n\n\tdata = out.data;\n\tset = out.accessors[ 1 ];\n\n\tio = offsetOut;\n\tiv = offsetView;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( data, io, view[ m ]( iv, littleEndian ) );\n\t\tio += strideOut;\n\t\tiv += strideView;\n\t}\n\treturn view;\n}\n\n\n// MAIN //\n\n/**\n* Copies elements from an input strided DataView to elements in an output strided array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {DataView} view - input DataView\n* @param {integer} strideView - `view` stride length (in bytes)\n* @param {NonNegativeInteger} offsetView - starting `view` index (in bytes)\n* @param {Collection} out - output array\n* @param {integer} strideOut - `out` stride length\n* @param {NonNegativeInteger} offsetOut - starting `out` index\n* @param {boolean} littleEndian - boolean indicating whether the data is stored in little-endian format\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var DataView = require( '@stdlib/array-dataview' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var view = new DataView( x.buffer );\n*\n* var y = new Float64Array( x.length );\n* var out = readDataView( x.length, view, 8, 0, y, 1, 0, true );\n* // e.g., returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\nfunction readDataView( N, view, strideView, offsetView, out, strideOut, offsetOut, littleEndian ) {\n\tvar obj;\n\tvar dt;\n\tif ( N <= 0 ) {\n\t\treturn out;\n\t}\n\tobj = arraylike2object( out );\n\tif ( obj.accessorProtocol ) {\n\t\t// If provided a complex number array, reinterpret as a real typed array of interleaved real and imaginary components...\n\t\tif ( isComplex128Array( out ) ) {\n\t\t\tobj.data = reinterpret128( out, 0 );\n\t\t\tcomplex( 'float64', N, view, strideView, offsetView, obj, strideOut, offsetOut, littleEndian );\n\t\t\treturn out;\n\t\t}\n\t\tif ( isComplex64Array( out ) ) {\n\t\t\tobj.data = reinterpret64( out, 0 );\n\t\t\tcomplex( 'float32', N, view, strideView, offsetView, obj, strideOut, offsetOut, littleEndian );\n\t\t\treturn out;\n\t\t}\n\t\t// If provided a boolean array, reinterpret as typed array of integers...\n\t\tif ( isBooleanArray( out ) ) {\n\t\t\tobj.data = reinterpretBoolean( out, 0 );\n\t\t\tindexed( 'uint8', N, view, strideView, offsetView, obj, strideOut, offsetOut, littleEndian );\n\t\t\treturn out;\n\t\t}\n\t\t// If provided a \"generic\" accessor array, assume double-precision floating-point numbers...\n\t\taccessors( 'float64', N, view, strideView, offsetView, obj, strideOut, offsetOut, littleEndian );\n\t\treturn out;\n\t}\n\tif ( obj.dtype === null || obj.dtype === 'generic' ) {\n\t\t// If provided a \"generic\" array, assume double-precision floating-point numbers...\n\t\tdt = 'float64';\n\t} else {\n\t\tdt = obj.dtype;\n\t}\n\tindexed( dt, N, view, strideView, offsetView, obj, strideOut, offsetOut, littleEndian );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = readDataView;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Copies elements from an input strided DataView to elements in an output strided array.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {DataView} view - output DataView\n* @param {integer} strideView - `view` stride length (in bytes)\n* @param {Collection} out - input array\n* @param {integer} strideOut - `out` stride length\n* @param {boolean} littleEndian - boolean indicating whether the data is stored in little-endian format\n* @returns {Collection} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var DataView = require( '@stdlib/array-dataview' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var view = new DataView( x.buffer );\n*\n* var y = new Float64Array( x.length );\n* var out = readDataView( x.length, view, 8, y, 1, true );\n* // e.g., returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\nfunction readDataView( N, view, strideView, out, strideOut, littleEndian ) {\n\treturn ndarray( N, view, strideView, stride2offset( N, strideView ), out, strideOut, stride2offset( N, strideOut ), littleEndian ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = readDataView;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Copy elements from an input strided DataView to elements in an output strided array.\n*\n* @module @stdlib/strided-base-read-dataview\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var DataView = require( '@stdlib/array-dataview' );\n* var readDataView = require( '@stdlib/strided-base-read-dataview' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var view = new DataView( x.buffer );\n*\n* var y = new Float64Array( x.length );\n* var out = readDataView( x.length, view, 8, y, 1, true );\n* // e.g., returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var DataView = require( '@stdlib/array-dataview' );\n* var readDataView = require( '@stdlib/strided-base-read-dataview' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\n* var view = new DataView( x.buffer );\n*\n* var y = new Float64Array( x.length );\n* var out = readDataView.ndarray( x.length, view, 8, 0, y, 1, 0, true );\n* // e.g., returns <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n*\n* var bool = ( out === y );\n* // returns true\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "isComplex128Array", "isComplex64Array", "isBooleanArray", "arraylike2object", "reinterpret128", "reinterpret64", "reinterpretBoolean", "bytesPerElement", "METHOD_TABLE", "indexed", "dtype", "N", "view", "strideView", "offsetView", "out", "strideOut", "offsetOut", "littleEndian", "data", "io", "iv", "m", "i", "complex", "nbytes", "accessors", "set", "readDataView", "obj", "dt", "require_main", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "readDataView", "N", "view", "strideView", "out", "strideOut", "littleEndian", "setReadOnly", "main", "ndarray"]
}
